{"version":3,"sources":["components/navbar.jsx","components/counter.jsx","components/counters.jsx","App.js","serviceWorker.js","index.js"],"names":["NavBar","_ref","totalCounters","console","log","react_default","a","createElement","className","href","Counter","prevProps","prevState","counter","value","this","props","_this","getBadgeClasses","formatCount","onClick","onIncrement","onDelete","id","classes","count","Component","Counters","_this$props","onReset","counters","map","components_counter","key","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","handleIncrement","toConsumableArray","index","indexOf","objectSpread","setState","handleReset","c","handleDelete","counterId","filter","Fragment","navbar","length","components_counters","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.71563a6c.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\n//Currently have single reference to the props object, but when working with more complex markups, we might have multiple references to the props (don't wanna be repeating props.props. several times etc)\r\n//You do object destructuring to destructure the props arugment\r\nconst NavBar = ({ totalCounters }) => {\r\n  console.log(\"NavBar - Rendered\");\r\n\r\n  return (\r\n    <nav className=\"navbar navbar-light bg-light\">\r\n      <a className=\"navbar-brand\" href=\"#\">\r\n        Navbar\r\n        <span className=\"badge badge-pill badge-secondary\">\r\n          {totalCounters}\r\n        </span>\r\n      </a>\r\n    </nav>\r\n  );\r\n};\r\nexport default NavBar;\r\n","import React, { Component } from \"react\";\r\n\r\nclass Counter extends Component {\r\n  componentDidUpdate(prevProps, prevState) {\r\n    console.log(\"prevProps\", prevProps);\r\n    console.log(\"prevState\", prevState);\r\n    if (prevProps.counter.value !== this.props.counter.value) {\r\n      //Ajax call and get new data from the server\r\n    }\r\n  }\r\n\r\n  //this method is called just before a component is removed from the DOM.\r\n  componentWillUnmount() {\r\n    console.log(\"Counter - Unmount\");\r\n  }\r\n\r\n  render() {\r\n    console.log(\"Counter - Rendered\");\r\n\r\n    return (\r\n      <div>\r\n        <span className={this.getBadgeClasses()}>{this.formatCount()}</span>\r\n        <button\r\n          onClick={() => this.props.onIncrement(this.props.counter)}\r\n          className=\"btn btn-secondary btn-sm\"\r\n        >\r\n          Increment\r\n        </button>\r\n        <button\r\n          onClick={() => this.props.onDelete(this.props.counter.id)}\r\n          className=\"btn btn-danger btn-sm m-2\"\r\n        >\r\n          Delete\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  getBadgeClasses() {\r\n    let classes = \"badge m-2 badge-\";\r\n    classes += this.props.counter.value === 0 ? \"warning\" : \"primary\";\r\n    return classes;\r\n  }\r\n  formatCount() {\r\n    const { value: count } = this.props.counter;\r\n    return count === 0 ? \"Zero\" : count;\r\n  }\r\n}\r\n\r\nexport default Counter;\r\n","import React, { Component } from \"react\";\r\nimport Counter from \"./counter\";\r\n\r\nclass Counters extends Component {\r\n  render() {\r\n    //before the return statement, define a constant, use object destructuring to pick the properties of the props object you're interested in\r\n    //you pick all the below from this.props; Now anywhere you have this.props, you can replace all of those with nothing.\r\n    const { onReset, counters, onDelete, onIncrement } = this.props;\r\n    console.log(\"Counters - Rendered\");\r\n    return (\r\n      <div>\r\n        <button onClick={onReset} className=\"btn btn-primary btn-sm m-2\">\r\n          Reset\r\n        </button>\r\n        {counters.map(counter => (\r\n          <Counter\r\n            key={counter.id}\r\n            onDelete={onDelete}\r\n            onIncrement={onIncrement}\r\n            counter={counter}\r\n          />\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Counters;\r\n","import React, { Component } from \"react\";\nimport NavBar from \"./components/navbar\";\nimport \"./App.css\";\nimport Counters from \"./components/counters\";\n\nclass App extends Component {\n  state = {\n    counters: [\n      { id: 1, value: 4 },\n      { id: 2, value: 0 },\n      { id: 3, value: 1 },\n      { id: 4, value: 0 }\n    ]\n  };\n  constructor(props) {\n    super(props);\n    console.log(\"App - Constructor\");\n  }\n  componentDidMount() {\n    console.log(\"App - Mounted\");\n  }\n  //looking at this button\n  handleIncrement = counter => {\n    const counters = [...this.state.counters];\n    const index = counters.indexOf(counter);\n    counters[index] = { ...counter };\n    counters[index].value++;\n    //in this method, we are updating the state of App component, so this will schedule a call to the render so our App is going to be rendered, meaning all is children as well. \n    this.setState({ counters });\n  };\n\n  handleReset = () => {\n    const counters = this.state.counters.map(c => {\n      c.value = 0;\n      return c;\n    });\n    this.setState({ counters });\n  };\n\n  handleDelete = counterId => {\n    const counters = this.state.counters.filter(c => c.id !== counterId);\n    this.setState({ counters });\n  };\n\n  render() {\n    console.log(\"App - Rendered\");\n\n    return (\n      <React.Fragment>\n        <NavBar\n          totalCounters={this.state.counters.filter(c => c.value > 0).length}\n        />\n        <main className=\"container\">\n          <Counters\n            counters={this.state.counters}\n            onReset={this.handleReset}\n            onIncrement={this.handleIncrement}\n            onDelete={this.handleDelete}\n          />\n        </main>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\n//replace <Counters /> component with App component\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}